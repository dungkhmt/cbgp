import matplotlib.pyplot as plt
import math
from collections import defaultdict
import numpy as np

# nodes dictionary with coordinates
nodes = {
# 0: (14, 16),
# 1: (13, 20),
# 2: (0, 19),
# 3: (3, 19),
# 4: (13, 19),
# 5: (10, 18),
# 6: (0, 8),
# 7: (2, 9),
# 8: (11, 17),
# 9: (13, 16),
# 10: (0, 0),
# 11: (1, 7),
# 12: (2, 5),
# 13: (18, 8),
# 14: (7, 5),
# 15: (20, 2),
# 16: (19, 15),
# 17: (19, 5),
# 18: (12, 4),
# 19: (10, 5),
# 0: (18, 12),
# 1: (20, 7),
# 2: (14, 0),
# 3: (0, 17),
# 4: (18, 18),
# 5: (20, 13),
# 6: (8, 0),
# 7: (0, 12),
# 8: (16, 12),
# 9: (13, 16),
# 10: (10, 5),
# 11: (6, 10),
# 12: (13, 8),
# 13: (9, 13),
# 14: (6, 17),
# 15: (11, 17),
# 16: (16, 15),
# 17: (19, 5),
# 18: (18, 0),
# 19: (12, 3),
# 0: (20, 15),
# 1: (20, 7),
# 2: (12, 0),
# 3: (5, 16),
# 4: (11, 19),
# 5: (5, 20),
# 6: (0, 0),
# 7: (5, 10),
# 8: (6, 15),
# 9: (11, 11),
# 10: (10, 6),
# 11: (12, 1),
# 12: (11, 7),
# 13: (18, 8),
# 14: (13, 12),
# 15: (11, 18),
# 16: (19, 15),
# 17: (19, 5),
# 18: (18, 0),
# 19: (12, 5),
# 0: (4, 20),
# 1: (0, 16),
# 2: (0, 9),
# 3: (1, 14),
# 4: (10, 20),
# 5: (5, 19),
# 6: (0, 0),
# 7: (3, 5),
# 8: (4, 12),
# 9: (9, 11),
# 10: (10, 6),
# 11: (11, 1),
# 12: (16, 3),
# 13: (18, 8),
# 14: (14, 12),
# 15: (9, 15),
# 16: (19, 15),
# 17: (19, 5),
# 18: (18, 0),
# 19: (2, 0),
# 0: (14, 19),
# 1: (20, 8),
# 2: (14, 0),
# 3: (5, 1),
# 4: (9, 20),
# 5: (19, 14),
# 6: (16, 8),
# 7: (0, 8),
# 8: (0, 19),
# 9: (14, 15),
# 10: (10, 6),
# 11: (5, 10),
# 12: (6, 15),
# 13: (19, 18),
# 14: (15, 10),
# 15: (10, 12),
# 16: (3, 13),
# 17: (9, 10),
# 18: (18, 0),
# 19: (20, 5),

# 0: (15, 11),
# 1: (16, 20),
# 2: (1, 20),
# 3: (11, 17),
# 4: (14, 16),
# 5: (2, 16),
# 6: (0, 15),
# 7: (10, 15),
# 8: (10, 11),
# 9: (2, 5),
# 10: (0, 1),
# 11: (8, 8),
# 12: (13, 8),
# 13: (8, 6),
# 14: (2, 0),
# 15: (20, 3),
# 16: (17, 4),
# 17: (6, 2),
# 18: (8, 4),
# 19: (10, 5),

# 0: (12, 14),
# 1: (16, 12),
# 2: (19, 18),
# 3: (1, 20),
# 4: (0, 6),
# 5: (8, 14),
# 6: (10, 13),
# 7: (11, 15),
# 8: (6, 18),
# 9: (0, 1),
# 10: (9, 11),
# 11: (15, 10),
# 12: (9, 9),
# 13: (5, 6),
# 14: (3, 0),
# 15: (15, 8),
# 16: (20, 6),
# 17: (19, 5),
# 18: (11, 6),
# 19: (10, 5),

# 0: (11, 15),
# 1: (17, 12),
# 2: (17, 20),
# 3: (4, 20),
# 4: (0, 15),
# 5: (9, 14),
# 6: (14, 11),
# 7: (14, 17),
# 8: (7, 17),
# 9: (5, 16),
# 10: (10, 11),
# 11: (12, 10),
# 12: (8, 7),
# 13: (5, 7),
# 14: (2, 12),
# 15: (11, 6),
# 16: (13, 5),
# 17: (10, 2),
# 18: (2, 2),
# 19: (1, 7),

# 0: (19, 19),
# 1: (20, 7),
# 2: (19, 4),
# 3: (7, 2),
# 4: (6, 7),
# 5: (15, 15),
# 6: (15, 9),
# 7: (11, 8),
# 8: (10, 12),
# 9: (3, 8),
# 10: (12, 18),
# 11: (13, 15),
# 12: (10, 14),
# 13: (2, 9),
# 14: (0, 6),
# 15: (0, 18),
# 16: (9, 16),
# 17: (3, 16),
# 18: (4, 12),
# 19: (0, 10),

# 0: (14, 15),
# 1: (19, 10),
# 2: (19, 20),
# 3: (1, 20),
# 4: (0, 4),
# 5: (9, 13),
# 6: (12, 12),
# 7: (11, 15),
# 8: (6, 13),
# 9: (0, 1),
# 10: (11, 11),
# 11: (14, 10),
# 12: (9, 9),
# 13: (6, 6),
# 14: (3, 0),
# 15: (13, 8),
# 16: (15, 6),
# 17: (13, 6),
# 18: (8, 6),
# 19: (10, 5),

# 0: (15, 0),
# 1: (16, 3),
# 2: (18, 0),
# 3: (16, 16),
# 4: (8, 19),
# 5: (10, 1),
# 6: (12, 2),
# 7: (16, 8),
# 8: (16, 11),
# 9: (1, 20),
# 10: (4, 0),
# 11: (10, 3),
# 12: (4, 13),
# 13: (10, 5),
# 14: (7, 16),
# 15: (3, 5),
# 16: (0, 9),
# 17: (1, 16),
# 18: (3, 15),
# 19: (9, 7),

# 0: (7, 16),
# 1: (14, 12),
# 2: (19, 18),
# 3: (1, 20),
# 4: (0, 6),
# 5: (7, 11),
# 6: (10, 13),
# 7: (11, 15),
# 8: (6, 18),
# 9: (0, 1),
# 10: (9, 11),
# 11: (15, 10),
# 12: (9, 9),
# 13: (5, 6),
# 14: (3, 0),
# 15: (15, 8),
# 16: (20, 6),
# 17: (19, 5),
# 18: (11, 6),
# 19: (10, 5),

# 0: (7, 16),
# 1: (0, 6),
# 2: (0, 13),
# 3: (0, 5),
# 4: (13, 19),
# 5: (5, 19),
# 6: (3, 12),
# 7: (4, 5),
# 8: (10, 2),
# 9: (14, 2),
# 10: (11, 18),
# 11: (7, 15),
# 12: (16, 12),
# 13: (9, 10),
# 14: (15, 1),
# 15: (3, 2),
# 16: (16, 20),
# 17: (8, 5),
# 18: (18, 12),
# 19: (19, 3),
# 0: (12, 20),
# 1: (10, 16),
# 2: (5, 16),
# 3: (0, 13),
# 4: (0, 5),
# 5: (12, 15),
# 6: (7, 6),
# 7: (6, 14),
# 8: (2, 12),
# 9: (2, 0),
# 10: (16, 13),
# 11: (3, 14),
# 12: (16, 13),
# 13: (4, 2),
# 14: (8, 1),
# 15: (17, 19),
# 16: (18, 17),
# 17: (16, 7),
# 18: (17, 3),
# 19: (16, 0),

# 0: (5, 19),
# 1: (1, 20),
# 2: (0, 16),
# 3: (1, 10),
# 4: (0, 14),
# 5: (12, 11),
# 6: (3, 16),
# 7: (5, 5),
# 8: (3, 2),
# 9: (0, 9),
# 10: (7, 11),
# 11: (2, 12),
# 12: (9, 9),
# 13: (5, 6),
# 14: (3, 1),
# 15: (11, 10),
# 16: (20, 6),
# 17: (19, 5),
# 18: (11, 6),
# 19: (10, 5),

# 0: (7, 16),
# 1: (14, 12),
# 2: (19, 18),
# 3: (1, 20),
# 4: (0, 6),
# 5: (7, 11),
# 6: (10, 13),
# 7: (11, 15),
# 8: (6, 18),
# 9: (0, 1),
# 10: (9, 11),
# 11: (15, 10),
# 12: (9, 9),
# 13: (5, 6),
# 14: (3, 0),
# 15: (15, 8),
# 16: (20, 6),
# 17: (19, 5),
# 18: (11, 6),
# 19: (10, 5),
# 0: (16, 20),
# 1: (14, 17),
# 2: (14, 18),
# 3: (14, 20),
# 4: (2, 8),
# 5: (18, 18),
# 6: (17, 10),
# 7: (12, 18),
# 8: (5, 19),
# 9: (2, 20),
# 10: (10, 6),
# 11: (10, 8),
# 12: (13, 8),
# 13: (18, 8),
# 14: (19, 16),
# 15: (12, 3),
# 16: (14, 2),
# 17: (15, 4),
# 18: (19, 1),
# 19: (16, 1),
# 0: (9, 11),
# 1: (7, 14),
# 2: (13, 18),
# 3: (10, 19),
# 4: (7, 16),
# 5: (15, 8),
# 6: (17, 10),
# 7: (13, 15),
# 8: (5, 19),
# 9: (3, 17),
# 10: (12, 4),
# 11: (10, 8),
# 12: (4, 2),
# 13: (2, 0),
# 14: (0, 3),
# 15: (15, 4),
# 16: (17, 6),
# 17: (16, 2),
# 18: (13, 0),
# 19: (6, 9),
0: (6, 4),
1: (3, 3),
2: (10, 8),
3: (0, 3),
4: (7, 4),
5: (8, 3),
6: (9, 6),
7: (4, 6),
8: (6, 2),
9: (9, 0),


}

# edges list
edges = [
    # (0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10),
    # (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19),
    # (0, 4), (1, 5), (2, 6), (3, 7), (4, 8), (5, 9), (6, 10), (7, 11), (8, 12), (9, 13), (10, 14)

    # (0, 1), (0, 5), (1, 2), (1, 6), (2, 3), (2, 7), (3, 4), (3, 8), (4, 9), (5, 6), (5, 10), (6, 7),
    # (6, 11), (7, 8), (8, 9), (8, 13), (9, 14), (10, 11), (10, 15), (11, 12), (11, 16), (12, 13),
    # (12, 17), (13, 14), (13, 18), (14, 19), (15, 16), (16, 17), (17, 18), (18, 19)

]


adj = defaultdict(list)
for u, v in edges:
    adj[u].append(v)
    adj[v].append(u)  

def angle_between(v1, v2):
    dot = v1[0]*v2[0] + v1[1]*v2[1]
    norm1 = math.sqrt(v1[0]**2 + v1[1]**2)
    norm2 = math.sqrt(v2[0]**2 + v2[1]**2)
    cos_theta = dot / (norm1 * norm2)
    cos_theta = min(1.0, max(-1.0, cos_theta))
    angle = math.acos(cos_theta)
    return angle

# graph presentation
plt.figure(figsize=(10, 10))

for u, v in edges:
    x0, y0 = nodes[u]
    x1, y1 = nodes[v]
    plt.plot([x0, x1], [y0, y1], 'k-', alpha=0.7)
    length = math.sqrt((x1 - x0)**2 + (y1 - y0)**2)
    mid_x = (x0 + x1) / 2
    mid_y = (y0 + y1) / 2
    plt.text(mid_x, mid_y, f"{length:.1f}", fontsize=8, color='red', ha='center', va='center')



for node, (x, y) in nodes.items():
    plt.plot(x, y, 'bo')
    plt.text(x + 0.3, y + 0.3, str(node), fontsize=9, color='black')
    neighbors = adj[node]
    angles_text = ""
    if len(neighbors) >= 2:
        for i in range(len(neighbors)):
            for j in range(i+1, len(neighbors)):
                n1 = neighbors[i]
                n2 = neighbors[j]
                v1 = (nodes[n1][0] - x, nodes[n1][1] - y)
                v2 = (nodes[n2][0] - x, nodes[n2][1] - y)
                angle = angle_between(v1, v2)
                angles_text += f"{angle:.3f} rad\n"
    if angles_text:
        plt.text(x, y - 1.0, angles_text.strip(), fontsize=6, color='blue', ha='center')

plt.xlabel('X')
plt.ylabel('Y')
plt.title('Đồ thị theo tọa độ')
plt.grid(True)
plt.axis('equal')
plt.show()
